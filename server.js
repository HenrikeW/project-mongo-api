import express from 'express';
import bodyParser from 'body-parser';
import cors from 'cors';
import mongoose from 'mongoose';

import musicData from './data/top-music.json';

// If you're using one of our datasets, uncomment the appropriate import below
// to get started!
// 
// import goldenGlobesData from './data/golden-globes.json'
// import avocadoSalesData from './data/avocado-sales.json'
// import booksData from './data/books.json'
// import netflixData from './data/netflix-titles.json'
// import topMusicData from './data/top-music.json'

const mongoUrl = process.env.MONGO_URL || "mongodb://localhost/project-mongo";
mongoose.connect(mongoUrl, { useNewUrlParser: true, useUnifiedTopology: true });
mongoose.Promise = Promise;

const Artist = mongoose.model('Artist', {
  name: String
});

const Track = mongoose.model('Track', {
  trackName: String,
  artistName: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Artist'
  },
  genre: String,
  bpm: Number,
  popularity: Number
});

if (process.env.RESET_DATABASE) {
  const seedDatabase = async () => {
    await Track.deleteMany();
    await Artist.deleteMany();

    // create an array of strings with all artist names (even duplicates)
    const allArtists = musicData.map((item) => item.artistName);
    // create an array of strings with only one occurence of each artist name
    const uniqueArtists = Array.from(new Set(allArtists));

    // create an array of artist objects following the mongoose model
    let artists = [];

    uniqueArtists.forEach(async artist => {
      const newArtist = new Artist({ name: artist });

      artists.push(newArtist);
      await newArtist.save();
    });

    // create an array of tracks objects following the mongoose model
    musicData.forEach(async trackItem => {
      const newTrack = new Track({
        ...trackItem,
        artistName: artists.find((artist) => artist.name === trackItem.artistName)
      });
      await newTrack.save();
    });
  };
  seedDatabase();
};

// Defines the port the app will run on. Defaults to 8080, but can be 
// overridden when starting the server. For example:
//
//   PORT=9000 npm start
const port = process.env.PORT || 8080;
const app = express();

// Add middlewares to enable cors and json body parsing
app.use(cors());
app.use(bodyParser.json());

// Start defining your routes here
app.get('/', (req, res) => {
  res.send('Welcome to the music ðŸŽµ')
});

// Get all tracks in the list with the option to query for fields
app.get('/tracks', async (req, res) => {
  let tracks = await Track.find(req.query);

  const isPop = req.query.isPop;

  const artistName = req.query.artistName;

  // get all the different pop genres
  if (isPop) {
    const allTracks = await Track.find();
    tracks = allTracks.filter((track) => track.genre.includes('pop'));
  };

  // get all tracks of an artist even when querying for parts of the name and ignoring upper/lower case
  if (artistName) {
    const allTracks = await Track.find();
    tracks = allTracks.filter((track) => track.artistName.toLowerCase().includes(artistName.toLowerCase()));
  };

  res.json(tracks);
});

//Get one track by id generated by mongoose
app.get('/tracks/:id', async (req, res) => {
  const track = await Track.findById(req.params.id);
  if (track) {
    res.json(track)
  } else {
    res.status(404).json({ error:'Could not find this track' })
  };
});

//Get all artists
app.get('/artists', async (req, res) => {
  const artists = await Artist.find();
  res.json(artists);
});

// Get one artist by id generated by mongoose
app.get('/artists/:id', async (req, res) => {
  const artist = await Artist.findById(req.params.id);
  if (artist) {
    res.json(artist);
  } else {
    res.status(404).json({ error: 'Artist not found'});
  };
});

// Get all tracks by a certain artist
app.get('/artists/:id/tracks', async (req, res) => {
  const artist = await Artist.findById(req.params.id);
  if (artist) {
    const tracks = await Track.find({ artistName: mongoose.Types.ObjectId(artist.id) });
    res.json(tracks);
  } else {
    res.status(404).json({ error: 'Artist not found' })
  };
});

// Start the server
app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});
